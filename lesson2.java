import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.logging.FileHandler;
import java.util.logging.SimpleFormatter;

public class lesson2 {
public static void main(String[] args){
    System.out.println(task0(40, 's', 'h'));
//    task1();
    task3(wordRepeat(10,"test"));

}
    static String task0(int n, char c1, char c2){
        /* –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
        –î–∞–Ω–æ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ N (>0) –∏ —Å–∏–º–≤–æ–ª—ã c1 –∏ c2. –ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª–∏–Ω—ã N, 
        –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ c1 –∏ c2, –Ω–∞—á–∏–Ω–∞—è —Å c1. */
        StringBuilder stringBuilder = new StringBuilder();
        for(int i = 0; i < n/2; i++){
            stringBuilder.append(c1).append(c2);
        }
        return stringBuilder.toString();
    }
static void task1(String str){
//        –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–∂–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É. –ü—Ä–∏–º–µ—Ä: –≤—Ö–æ–¥ aaaabbbcdd.
//
//üîë **–û—Ç–≤–µ—Ç:** —Ä–µ–∑—É–ª—å—Ç–∞—Ç - a4b3c1d2 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        char[] chars = str.toCharArray();
        Arrays.sort(chars);
        int count = 0;
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 1; i < chars.length; i++) {
            if(chars[i] != chars[i-1]){
                stringBuilder.append(chars[i-1]).append(count + 1);
                count = 0;
            } else {
                count++;
            }
        }
        stringBuilder.append(chars[chars.length-1]).append(count+1);
        System.out.println(stringBuilder);
    }
    static boolean task2(String str){
        //        –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É (String) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
        //        (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean –∑–Ω–∞—á–µ–Ω–∏–µ).
                StringBuilder stringBuilder = new StringBuilder(str);
                String str2 = stringBuilder.reverse().toString();
                return str.equals(str2);
            }
    static void task3(String str)  {
    //        –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
    //        –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–∏—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ 100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    //        —Å–ª–æ–≤–∞ TEST –∏ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—à–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
        try (FileWriter writer = new FileWriter("text.txt",true)){
            writer.write(str);
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    static String wordRepeat(int n, String str){
        return str.repeat(n);
    }
    static void task4(String str){
    //        –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:
    //        –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–∏—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ 100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å–ª–æ–≤–∞ TEST –∏ –º–µ—Ç–æ–¥,
    //        –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—à–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
            Logger logger = Logger.getAnonymousLogger();
            try {
                FileHandler fh = new FileHandler("log.txt", true);
                logger.addHandler(fh);
                SimpleFormatter simpleFormatter = new SimpleFormatter();
                fh.setFormatter(simpleFormatter);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            try (FileWriter writer = new FileWriter("/dfg/text.txt", true)){
                writer.write(str);
                writer.flush();
            } catch (IOException e) {
                logger.log(Level.WARNING, e.getMessage());
            }

        }

}